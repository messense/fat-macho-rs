name: Python

on:
  push:
  pull_request:

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.6]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - name: Build Wheels - Linux
      if: startsWith(matrix.os, 'ubuntu')
      env:
        PYTHON_VERSION: python${{ matrix.python-version }}
      run: |
        docker build -t maturin:latest -f python/Dockerfile .
        docker run --rm -v $(pwd):/io maturin:latest sh -c "source ~/.cargo/env && maturin build -i $PYTHON_VERSION --release --out dist -m python/Cargo.toml"
        pip install fat-macho --no-index --find-links dist --force-reinstall

    - name: Build Wheels - Windows
      if: startsWith(matrix.os, 'windows')
      run: |
        pip install maturin
        maturin build -i python --release --out dist -m python/Cargo.toml
        pip install fat-macho --no-index --find-links dist --force-reinstall

    - name: Build Wheels - macOS
      if: startsWith(matrix.os, 'macos')
      run: |
        # Setup Xcode
        echo "PYO3_CROSS_LIB_DIR=/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib" >> "${GITHUB_ENV}"
        sudo xcode-select -s /Applications/Xcode_12.3.app
        bindir="$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/bin"
        echo "CC=${bindir}/clang" >> "${GITHUB_ENV}"
        echo "CXX=${bindir}/clang++" >> "${GITHUB_ENV}"
        echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> "${GITHUB_ENV}"
        # Install rustup targets
        rustup target add x86_64-apple-darwin aarch64-apple-darwin
        # Build wheels
        pip install maturin
        maturin build -i python --target x86_64-apple-darwin --release --out dist -m python/Cargo.toml
        maturin build -i python --target aarch64-apple-darwin --release --out dist -m python/Cargo.toml
        maturin build -i python --release --universal2 --out dist -m python/Cargo.toml
        pip install fat-macho --no-index --find-links dist --force-reinstall

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

    - name: Publish package - Non-Linux
      if: startsWith(github.ref, 'refs/tags/') && (startsWith(matrix.os, 'windows') || startsWith(matrix.os, 'macos'))
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: |
          pip install twine
          twine upload --skip-existing dist/*

    - name: Publish package - Linux
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
        skip_existing: true
